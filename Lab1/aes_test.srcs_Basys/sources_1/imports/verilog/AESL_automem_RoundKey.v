// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

`define AES
module AESL_automem_RoundKey (
    clk,
    rst,
    ce0,
    we0,
    address0,
    din0,
    dout0,
    ce1,
    we1,
    address1,
    din1,
    dout1,
    ready,
    done
);

//------------------------Parameter----------------------
localparam
    TV_IN  = "../tv/cdatafile/c.Cipher.autotvin_RoundKey.dat", 
    TV_OUT = "../tv/rtldatafile/rtl.Cipher.autotvout_RoundKey.dat"; 
//------------------------Local signal-------------------
parameter DATA_WIDTH = 32'd 8;
parameter ADDR_WIDTH = 32'd 8;
parameter DEPTH = 32'd 240;
parameter DLY = 0.1;

// Input and Output
input clk;
input rst;
input ce0, ce1;
input we0, we1;
input [ADDR_WIDTH - 1 : 0] address0, address1;
input [DATA_WIDTH - 1 : 0] din0, din1;
output reg [DATA_WIDTH - 1 : 0] dout0, dout1;
input ready;
input done;

// Inner signals
reg [DATA_WIDTH - 1 : 0] mem [0 : DEPTH - 1];
initial begin : initialize_mem
    integer i;
    for(i=0;i<DEPTH;i = i + 1) begin
        mem[0] = 'd0;
    end
    mem[0]   =   'h2b;
    mem[1]   =   'h7e;
    mem[2]   =   'h15;
    mem[3]   =   'h16;
    mem[4]   =   'h28;
    mem[5]   =   'hae;
    mem[6]   =   'hd2;
    mem[7]   =   'ha6;
    mem[8]   =   'hab;
    mem[9]   =   'hf7;
    mem[10]  =   'h15;
    mem[11]  =   'h88;
    mem[12]  =   'h09;
    mem[13]  =   'hcf;
    mem[14]  =   'h4f;
    mem[15]  =   'h3c;
    mem[16]  =   'ha0;
    mem[17]  =   'hfa;
    mem[18]  =   'hfe;
    mem[19]  =   'h17;
    mem[20]  =   'h88;
    mem[21]  =   'h54;
    mem[22]  =   'h2c;
    mem[23]  =   'hb1;
    mem[24]  =   'h23;
    mem[25]  =   'ha3;
    mem[26]  =   'h39;
    mem[27]  =   'h39;
    mem[28]  =   'h2a;
    mem[29]  =   'h6c;
    mem[30]  =   'h76;
    mem[31]  =   'h05;
    mem[32]  =   'hf2;
    mem[33]  =   'hc2;
    mem[34]  =   'h95;
    mem[35]  =   'hf2;
    mem[36]  =   'h7a;
    mem[37]  =   'h96;
    mem[38]  =   'hb9;
    mem[39]  =   'h43;
    mem[40]  =   'h59;
    mem[41]  =   'h35;
    mem[42]  =   'h80;
    mem[43]  =   'h7a;
    mem[44]  =   'h73;
    mem[45]  =   'h59;
    mem[46]  =   'hf6;
    mem[47]  =   'h7f;
    mem[48]  =   'h3d;
    mem[49]  =   'h80;
    mem[50]  =   'h47;
    mem[51]  =   'h7d;
    mem[52]  =   'h47;
    mem[53]  =   'h16;
    mem[54]  =   'hfe;
    mem[55]  =   'h3e;
    mem[56]  =   'h1e;
    mem[57]  =   'h23;
    mem[58]  =   'h7e;
    mem[59]  =   'h44;
    mem[60]  =   'h6d;
    mem[61]  =   'h7a;
    mem[62]  =   'h88;
    mem[63]  =   'h3b;
    mem[64]  =   'hef;
    mem[65]  =   'h44;
    mem[66]  =   'ha5;
    mem[67]  =   'h41;
    mem[68]  =   'ha8;
    mem[69]  =   'h52;
    mem[70]  =   'h5b;
    mem[71]  =   'h7f;
    mem[72]  =   'hb6;
    mem[73]  =   'h71;
    mem[74]  =   'h25;
    mem[75]  =   'h3b;
    mem[76]  =   'hdb;
    mem[77]  =   'h0b;
    mem[78]  =   'had;
    mem[79]  =   'h00;
    mem[80]  =   'hd4;
    mem[81]  =   'hd1;
    mem[82]  =   'hc6;
    mem[83]  =   'hf8;
    mem[84]  =   'h7c;
    mem[85]  =   'h83;
    mem[86]  =   'h9d;
    mem[87]  =   'h87;
    mem[88]  =   'hca;
    mem[89]  =   'hf2;
    mem[90]  =   'hb8;
    mem[91]  =   'hbc;
    mem[92]  =   'h11;
    mem[93]  =   'hf9;
    mem[94]  =   'h15;
    mem[95]  =   'hbc;
    mem[96]  =   'h6d;
    mem[97]  =   'h88;
    mem[98]  =   'ha3;
    mem[99]  =   'h7a;
    mem[100] =   'h11;
    mem[101] =   'h0b;
    mem[102] =   'h3e;
    mem[103] =   'hfd;
    mem[104] =   'hdb;
    mem[105] =   'hf9;
    mem[106] =   'h86;
    mem[107] =   'h41;
    mem[108] =   'hca;
    mem[109] =   'h00;
    mem[110] =   'h93;
    mem[111] =   'hfd;
    mem[112] =   'h4e;
    mem[113] =   'h54;
    mem[114] =   'hf7;
    mem[115] =   'h0e;
    mem[116] =   'h5f;
    mem[117] =   'h5f;
    mem[118] =   'hc9;
    mem[119] =   'hf3;
    mem[120] =   'h84;
    mem[121] =   'ha6;
    mem[122] =   'h4f;
    mem[123] =   'hb2;
    mem[124] =   'h4e;
    mem[125] =   'ha6;
    mem[126] =   'hdc;
    mem[127] =   'h4f;
    mem[128] =   'hea;
    mem[129] =   'hd2;
    mem[130] =   'h73;
    mem[131] =   'h21;
    mem[132] =   'hb5;
    mem[133] =   'h8d;
    mem[134] =   'hba;
    mem[135] =   'hd2;
    mem[136] =   'h31;
    mem[137] =   'h2b;
    mem[138] =   'hf5;
    mem[139] =   'h60;
    mem[140] =   'h7f;
    mem[141] =   'h8d;
    mem[142] =   'h29;
    mem[143] =   'h2f;
    mem[144] =   'hac;
    mem[145] =   'h77;
    mem[146] =   'h66;
    mem[147] =   'hf3;
    mem[148] =   'h19;
    mem[149] =   'hfa;
    mem[150] =   'hdc;
    mem[151] =   'h21;
    mem[152] =   'h28;
    mem[153] =   'hd1;
    mem[154] =   'h29;
    mem[155] =   'h41;
    mem[156] =   'h57;
    mem[157] =   'h5c;
    mem[158] =   'h00;
    mem[159] =   'h6e;
    mem[160] =   'hd0;
    mem[161] =   'h14;
    mem[162] =   'hf9;
    mem[163] =   'ha8;
    mem[164] =   'hc9;
    mem[165] =   'hee;
    mem[166] =   'h25;
    mem[167] =   'h89;
    mem[168] =   'he1;
    mem[169] =   'h3f;
    mem[170] =   'h0c;
    mem[171] =   'hc8;
    mem[172] =   'hb6;
    mem[173] =   'h63;
    mem[174] =   'h0c;
    mem[175] =   'ha6;
    mem[176] =   'h00;
    mem[177] =   'h01;
    mem[178] =   'h02;
    mem[179] =   'h03;
    mem[180] =   'h04;
    mem[181] =   'h05;
    mem[182] =   'h06;
    mem[183] =   'h07;
    mem[184] =   'h08;
    mem[185] =   'h09;
    mem[186] =   'h0a;
    mem[187] =   'h0b;
    mem[188] =   'h0c;
    mem[189] =   'h0d;
    mem[190] =   'h0e;
    mem[191] =   'h0f;
    mem[192] =   'h6b;
    mem[193] =   'hc0;
    mem[194] =   'hbc;
    mem[195] =   'he1;
    mem[196] =   'h2a;
    mem[197] =   'h45;
    mem[198] =   'h99;
    mem[199] =   'h91;
    mem[200] =   'he1;
    mem[201] =   'h34;
    mem[202] =   'h74;
    mem[203] =   'h1a;
    mem[204] =   'h7f;
    mem[205] =   'h9e;
    mem[206] =   'h19;
    mem[207] =   'h25;
    mem[208] =   'hae;
    mem[209] =   'h2d;
    mem[210] =   'h8a;
    mem[211] =   'h57;
    mem[212] =   'h1e;
    mem[213] =   'h03;
    mem[214] =   'hac;
    mem[215] =   'h9c;
    mem[216] =   'h9e;
    mem[217] =   'hb7;
    mem[218] =   'h6f;
    mem[219] =   'hac;
    mem[220] =   'h45;
    mem[221] =   'haf;
    mem[222] =   'h8e;
    mem[223] =   'h51;
    mem[224] =   'h30;
    mem[225] =   'hc8;
    mem[226] =   'h1c;
    mem[227] =   'h46;
    mem[228] =   'ha3;
    mem[229] =   'h5c;
    mem[230] =   'he4;
    mem[231] =   'h11;
    mem[232] =   'he5;
    mem[233] =   'hfb;
    mem[234] =   'hc1;
    mem[235] =   'h19;
    mem[236] =   'h1a;
    mem[237] =   'h0a;
    mem[238] =   'h52;
    mem[239] =   'hef;
    /*for (i = 0; i < DEPTH; i = i + 1) begin;
        mem[i] = 0;
    end*/
end
//reg writed_flag;
//event write_process_done;
//------------------------Task and function--------------
/*task read_token;
    input integer fp;
    output reg [127 :0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

//------------------------Read array-------------------

// Read data form file to array
initial begin : read_file_process
    integer fp;
    integer err;
    integer ret;
    reg [127 : 0] token;
    reg [ 8*5 : 1] str;
    reg [ DATA_WIDTH - 1 : 0 ] mem_tmp;
    integer transaction_idx;
    integer i;
    transaction_idx = 0;

    wait(rst === 0);
    @(write_process_done);
    fp = $fopen(TV_IN,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", TV_IN);
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
		  $finish;
        end
        read_token(fp, token);              // skip transaction number
        while(ready == 0) begin
            @(write_process_done);
        end
        for(i = 0; i < DEPTH; i = i + 1) begin
            read_token(fp, token);
            ret = $sscanf(token, "0x%x", mem_tmp);
            mem[i] = mem_tmp;
            if (ret != 1) begin
                $display("Failed to parse token!");
                $finish;
            end
        end
        @(write_process_done);
        read_token(fp, token);
        if(token != "[[/transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp, token);
        transaction_idx = transaction_idx + 1;
    end
    $fclose(fp);
end
*/
// Read data from array to RTL
always @ (posedge clk) begin
    if(rst === 0) begin
        dout0 <= 0;
    end
    else begin
	  if((we0 == 0) && (ce0 == 1) && (ce1 == 1) && (we1 == 1) && (address0 == address1))
	      dout0 <= #DLY din1;
	  else if(ce0 == 1)
	      dout0 <= #DLY mem[address0];
        else ;
    end
end

always @ (posedge clk) begin
    if(rst === 0) begin
        dout1 <= 0;
    end
    else begin
	  if((we0 == 1) && (ce0 == 1) && (ce1 == 1) && (we1 == 0) && (address0 == address1))
            dout1 <= #DLY din0;
	  else if(ce1 == 1)
            dout1 <= #DLY mem[address1];
        else ;
    end
end

//------------------------Write array-------------------
// Write data from RTL to array
always @ (posedge clk) begin
    if ((we0 == 1) && (ce0 == 1))
        mem[address0] <= #DLY din0;
    if((ce1 == 1) && (we1 == 1))
        mem[address1] <= #DLY din1;
end

// Write data from RTL to array
/*always @ (posedge clk) begin
    if ((we0 == 1) && (ce0 == 1))
        mem[address0] <= #DLY din0;
end

always @ (posedge clk) begin
    if((ce1 == 1) && (we1 == 1))
        mem[address1] <= #DLY din1;
end*/
/*
// Write data from array to file
initial begin : write_file_proc
    integer fp;
    integer transaction_num;
    reg [ 8*5 : 1] str;
    integer i;
    transaction_num = 0;
    writed_flag = 1;
    wait(rst === 0);
    @(negedge clk);
    while(1) begin
        while(done == 0) begin
            -> write_process_done;
            @(negedge clk);
        end
        fp = $fopen(TV_OUT, "a");
        if(fp == 0) begin       // Failed to open file
            $display("Failed to open file \"%s\"!", TV_OUT);
            $finish;
        end
        $fdisplay(fp, "[[transaction]] %d", transaction_num);
	      for (i = 0; i < DEPTH; i = i + 1) begin
            $fdisplay(fp,"0x%x",mem[i]);
        end
        $fdisplay(fp, "[[/transaction]]");
        transaction_num = transaction_num + 1;
        $fclose(fp);
        writed_flag = 1;
        -> write_process_done;
        @(negedge clk);
    end
end

//------------------------conflict check-------------------
always @ (posedge clk) begin
    if ((we0 == 1) && (ce0 == 1) && (ce1 == 1) && (we1 == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0 == 1) && (ce0 == 1) && (ce1 == 1) && (we1 == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0 == 0) && (ce0 == 1) && (ce1 == 1) && (we1 == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end
*/
endmodule
