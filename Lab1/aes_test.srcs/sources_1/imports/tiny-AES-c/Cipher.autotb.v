// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      Cipher_0
`define AUTOTB_DUT_INST AESL_inst_Cipher
`define AUTOTB_TOP      apatb_Cipher_top
`define AUTOTB_TOP_INST AESL_inst_apatb_Cipher_top

module `AUTOTB_TOP
(
    input CPU_RESETN      ,
    input CLK100M         , 
    input BTNC            ,
    input BTNU            ,
    input BTNL            ,
    input BTNR            ,
    input BTND            ,
    input [15:0] SW       ,
    output [15:0] LED     ,
    input UART_TXD_IN     ,
    output UART_RXD_OUT   ,
    output UART_CTS       ,
    input  UART_RTS       ,
    output [07:0] SSEG_CA ,
    output [07:0] SSEG_AN  
  );

parameter INPUT_SIZE = 16; //In Bytes
parameter KEY_SIZE = 176; //In Bytes
parameter MEM2_SIZE = 16; //In bytes
parameter MEM0_DATA_WIDTH = 32'd8;
parameter MEM0_ADDR_WIDTH = 32'd4;
parameter MEM0_DEPTH      = 32'd16;
parameter MEM1_DATA_WIDTH = 32'd8;
parameter MEM1_ADDR_WIDTH = 32'd8;
parameter MEM1_DEPTH      = 32'd176;
parameter MEM2_DATA_WIDTH = 32'd32;
parameter MEM2_ADDR_WIDTH = 32'd1;
parameter MEM2_DEPTH      = 32'd2;
parameter DLY = 0.1;

wire        ap_clk = CLK100M;
wire        ap_rst = CPU_RESETN;
wire        ap_start;
wire        ap_done;
wire        ap_idle;
wire        ap_ready;
wire        mem0_ce0;
wire        mem0_we0;
wire [MEM0_ADDR_WIDTH-1:0] mem0_address0;
wire [MEM0_DATA_WIDTH-1:0] mem0_d0;
wire [MEM0_DATA_WIDTH-1:0] mem0_q0; 
wire        mem0_ce1;
wire        mem0_we1;
wire [MEM0_ADDR_WIDTH-1:0] mem0_address1;
wire [MEM0_DATA_WIDTH-1:0] mem0_d1;
wire [MEM0_DATA_WIDTH-1:0] mem0_q1;
wire        mem0_ready;
wire        mem0_done;

wire        mem1_ce0;
wire        mem1_we0;
wire [MEM1_ADDR_WIDTH-1:0] mem1_address0;
wire [MEM1_DATA_WIDTH-1:0] mem1_d0;
wire [MEM1_DATA_WIDTH-1:0] mem1_q0; 
wire        mem1_ce1;
wire        mem1_we1;
wire [MEM1_ADDR_WIDTH-1:0] mem1_address1;
wire [MEM1_DATA_WIDTH-1:0] mem1_d1;
wire [MEM1_DATA_WIDTH-1:0] mem1_q1;
wire        mem1_ready;
wire        mem1_done;

wire        mem2_ce0;
wire        mem2_we0;
wire [MEM2_ADDR_WIDTH-1:0] mem2_address0;
wire [MEM2_DATA_WIDTH-1:0] mem2_d0;
wire [MEM2_DATA_WIDTH-1:0] mem2_q0; 
wire        mem2_ce1;
wire        mem2_we1;
wire [MEM2_ADDR_WIDTH-1:0] mem2_address1;
wire [MEM2_DATA_WIDTH-1:0] mem2_d1;
wire [MEM2_DATA_WIDTH-1:0] mem2_q1;
wire        mem2_ready;
wire        mem2_done;

wire        uart_busy;

wire [07:0] tx_data;
wire        tx_data_vld;
wire [07:0] o_rx_out; 
wire        o_rx_vld;
wire        o_frame_error;

wire [31:0] led_display;
    
assign UART_CTS = 'd0;

control_unit #(.INPUT_SIZE      (INPUT_SIZE),
               .KEY_SIZE        (KEY_SIZE),
               .MEM2_SIZE       (MEM2_SIZE),
	       .MEM0_DATA_WIDTH (MEM0_DATA_WIDTH),
               .MEM0_ADDR_WIDTH (MEM0_ADDR_WIDTH),
	       .MEM0_DEPTH      (MEM0_DEPTH),
	       .MEM1_DATA_WIDTH (MEM1_DATA_WIDTH),
               .MEM1_ADDR_WIDTH (MEM1_ADDR_WIDTH),
	       .MEM1_DEPTH      (MEM1_DEPTH),
	       .MEM2_DATA_WIDTH (MEM2_DATA_WIDTH),
               .MEM2_ADDR_WIDTH (MEM2_ADDR_WIDTH),
	       .MEM2_DEPTH      (MEM2_DEPTH),
	       .DLY             (DLY))
    u_control_unit(
    .CLK            (CLK100M ),
    .CPU_RESETN     (CPU_RESETN ),
    //FPGA IO
    .BTNC           (BTNC ),
    .BTNU           (BTNU ),
    .BTND           (BTND ),
    .BTNR           (BTNR ),
    .BTNL           (BTNL ),
    .I_SW           (SW   ),
    .O_LED          (LED ), 
    //Seven Segment LED
    .O_LED_DISPLAY  (led_display),
    //UART wrapper Signals - RX and TX
    .I_UART_RX      (o_rx_out ),
    .I_UART_RX_VLD  (o_rx_vld ),
    .I_UART_BUSY    (uart_busy),
    .O_UART_TX      (tx_data ),
    .O_UART_TX_VLD  (tx_data_vld ),
    //DUT
    //Control Signals
    .I_AP_DONE      (ap_done ),
    .I_AP_IDLE      (ap_idle ),
    .I_AP_READY     (ap_ready ),
    .O_AP_START     (ap_start ),

    //State-signals
    .I_MEM0_CE0    (mem0_ce0 ),
    .I_MEM0_WE0    (mem0_we0 ),
    .I_MEM0_ADDRESS0 (mem0_address0),       
    .I_MEM0_D0       (mem0_d0      ),       
    .O_MEM0_Q0       (mem0_q0      ),       
    .I_MEM0_CE1    (mem0_ce1 ),
    .I_MEM0_WE1    (mem0_we1 ),
    .I_MEM0_ADDRESS1 (mem0_address1),       
    .I_MEM0_D1       (mem0_d1      ),       
    .O_MEM0_Q1       (mem0_q1      ),
    //Key signals
    .I_MEM1_CE0      (mem1_ce0           ),
    .I_MEM1_WE0      ('d0                ),
    .I_MEM1_ADDRESS0 (mem1_address0      ),
    .I_MEM1_D0       ('d0                ),
    .O_MEM1_Q0       (mem1_q0            ),
    .I_MEM1_CE1      ('d0                ),
    .I_MEM1_WE1      ('d0                ),
    .I_MEM1_ADDRESS1 ('d0                ),
    .I_MEM1_D1       ('d0                ),
    .O_MEM1_Q1       (                   ),
    //Output signals
    .I_MEM2_CE0      ('d0                ),
    .I_MEM2_WE0      ('d0                ),
    .I_MEM2_ADDRESS0 ('d0                ),
    .I_MEM2_D0       ('d0                ),
    .O_MEM2_Q0       (                   ),
    .I_MEM2_CE1      ('d0                ),
    .I_MEM2_WE1      ('d0                ),
    .I_MEM2_ADDRESS1 ('d0                ),
    .I_MEM2_D1       ('d0                ),
    .O_MEM2_Q1       (                   )
);


`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(!ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .state_address0(mem0_address0),
    .state_ce0(mem0_ce0),
    .state_we0(mem0_we0),
    .state_d0(mem0_d0),
    .state_q0(mem0_q0),
    .state_address1(mem0_address1),
    .state_ce1(mem0_ce1),
    .state_we1(mem0_we1),
    .state_d1(mem0_d1),
    .state_q1(mem0_q1),
    .RoundKey_address0(mem1_address0),
    .RoundKey_ce0(mem1_ce0),
    .RoundKey_q0(mem1_q0));


SevenSeg_Top u_SevenSeg_Top (
           .CLK 		(ap_clk),
           .data_in     (led_display),
           .alphabet    (1'b1),
           .SSEG_CA 	(SSEG_CA),
           .SSEG_AN 	(SSEG_AN));

uart_wrapper u_uart_wrapper(
    .CLK           (ap_clk        ),
    .CPU_RESET     (!ap_rst       ),
    .USB_UART_TX   (UART_TXD_IN   ),
    .USB_UART_RX   (UART_RXD_OUT  ),
    .O_RX_OUT      (o_rx_out      ), 
    .O_RX_VLD      (o_rx_vld      ),
    .O_FRAME_ERROR (o_frame_error ),
    .I_TX_DATA     (tx_data ),
    .I_TX_START    (tx_data_vld),
    .O_BUSY        (uart_busy     )
    );
 
endmodule
